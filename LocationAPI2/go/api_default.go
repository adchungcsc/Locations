/*
 * Location API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteLocation",
			strings.ToUpper("Delete"),
			"/adchungcsc/LocationAPI/1.0.0/location/{locationName}",
			c.DeleteLocation,
		},
		{
			"FindAllLocations",
			strings.ToUpper("Get"),
			"/adchungcsc/LocationAPI/1.0.0/locations",
			c.FindAllLocations,
		},
		{
			"FindLocation",
			strings.ToUpper("Get"),
			"/adchungcsc/LocationAPI/1.0.0/location/{locationName}",
			c.FindLocation,
		},
		{
			"InsertLocation",
			strings.ToUpper("Post"),
			"/adchungcsc/LocationAPI/1.0.0/location/{locationName}",
			c.InsertLocation,
		},
		{
			"UpdateLocation",
			strings.ToUpper("Put"),
			"/adchungcsc/LocationAPI/1.0.0/location/{locationName}",
			c.UpdateLocation,
		},
	}
}

// DeleteLocation - Delete a location
func (c *DefaultApiController) DeleteLocation(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	locationName := params["locationName"]
	result, err := c.service.DeleteLocation(locationName)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// FindAllLocations - Get all locations
func (c *DefaultApiController) FindAllLocations(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.FindAllLocations()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// FindLocation - Find a location
func (c *DefaultApiController) FindLocation(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	locationName := params["locationName"]
	result, err := c.service.FindLocation(locationName)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// InsertLocation - Insert a new location
func (c *DefaultApiController) InsertLocation(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	locationName := params["locationName"]
	latitude := query.Get("latitude")
	longitude := query.Get("longitude")
	result, err := c.service.InsertLocation(locationName, latitude, longitude)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UpdateLocation - Update an existing location
func (c *DefaultApiController) UpdateLocation(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	query := r.URL.Query()
	locationName := params["locationName"]
	description := query.Get("description")
	result, err := c.service.UpdateLocation(locationName, description)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
